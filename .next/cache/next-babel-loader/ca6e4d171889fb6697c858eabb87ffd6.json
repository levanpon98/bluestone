{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '~/lib/mongodb';\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.post(async (req, res) => {\n  let data = req.body;\n  data = JSON.parse(data);\n  await req.db.collection('config').updateOne({\n    name: 'services'\n  }, {\n    $set: data\n  });\n  return res.status(200).json({\n    message: \"OK\",\n    status: 200,\n    success: true\n  });\n});\nhandler.get(async (req, res) => {\n  const services = await req.db.collection('config').findOne({\n    name: 'services'\n  });\n\n  if (services) {\n    return res.status(200).json({\n      data: services,\n      message: \"OK\",\n      status: 200,\n      success: true\n    });\n  } else {\n    return res.status(400).json({\n      status: 400,\n      success: false\n    });\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/pages/api/services.jsx"],"names":["nextConnect","middleware","bcrypt","require","jwt","handler","use","post","req","res","data","body","JSON","parse","db","collection","updateOne","name","$set","status","json","message","success","get","services","findOne"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAME,OAAO,GAAGL,WAAW,EAA3B;AAEAK,OAAO,CAACC,GAAR,CAAYL,UAAZ;AAEAI,OAAO,CAACE,IAAR,CAAa,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7B,MAAIC,IAAI,GAAGF,GAAG,CAACG,IAAf;AACAD,EAAAA,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;AACA,QAAMF,GAAG,CAACM,EAAJ,CAAOC,UAAP,CAAkB,QAAlB,EAA4BC,SAA5B,CAAsC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAtC,EAA0D;AAACC,IAAAA,IAAI,EAACR;AAAN,GAA1D,CAAN;AAEA,SAAOD,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,IAAAA,OAAO,EAAE,IADe;AAExBF,IAAAA,MAAM,EAAE,GAFgB;AAGxBG,IAAAA,OAAO,EAAE;AAHe,GAArB,CAAP;AAKH,CAVD;AAYAjB,OAAO,CAACkB,GAAR,CAAY,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AAC5B,QAAMe,QAAQ,GAAG,MAAMhB,GAAG,CAACM,EAAJ,CAAOC,UAAP,CAAkB,QAAlB,EAA4BU,OAA5B,CAAoC;AAACR,IAAAA,IAAI,EAAE;AAAP,GAApC,CAAvB;;AAEA,MAAIO,QAAJ,EAAc;AACV,WAAOf,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBV,MAAAA,IAAI,EAAEc,QADkB;AAExBH,MAAAA,OAAO,EAAE,IAFe;AAGxBF,MAAAA,MAAM,EAAE,GAHgB;AAIxBG,MAAAA,OAAO,EAAE;AAJe,KAArB,CAAP;AAMH,GAPD,MAOO;AACH,WAAOb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,MAAAA,MAAM,EAAE,GADgB;AAExBG,MAAAA,OAAO,EAAE;AAFe,KAArB,CAAP;AAIH;AAEJ,CAjBD;AAoBA,eAAejB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '~/lib/mongodb';\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.post(async (req, res) => {\n    let data = req.body;\n    data = JSON.parse(data);\n    await req.db.collection('config').updateOne({name: 'services'}, {$set:data})\n\n    return res.status(200).json({\n        message: \"OK\",\n        status: 200,\n        success: true,\n    })\n})\n\nhandler.get(async (req, res) => {\n    const services = await req.db.collection('config').findOne({name: 'services'})\n\n    if (services) {\n        return res.status(200).json({\n            data: services,\n            message: \"OK\",\n            status: 200,\n            success: true,\n        })\n    } else {\n        return res.status(400).json({\n            status: 400,\n            success: false,\n        })\n    }\n    \n})\n\n\nexport default handler"]},"metadata":{},"sourceType":"module"}