{"ast":null,"code":"import nextConnect from 'next-connect';\nimport middleware from '~/lib/mongodb';\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.post(async (req, res) => {\n  const user = await req.db.collection('user').findOne({\n    email: req.body.email\n  });\n\n  if (user && bcrypt.compareSync(req.body.password, user.password)) {\n    const token = jwt.sign({\n      userId: user.id,\n      userEmail: user.email\n    }, \"bluestone\", {\n      expiresIn: '1d'\n    });\n    return res.status(200).json({\n      data: {\n        userId: user.id,\n        token: token,\n        isActive: true\n      },\n      message: \"Login successfully\",\n      status: 200,\n      success: true\n    });\n  } else {\n    return res.status(400).json({\n      message: 'Password is wrong!',\n      status: 400,\n      success: false\n    });\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/pages/api/auth/login.jsx"],"names":["nextConnect","middleware","bcrypt","require","jwt","handler","use","post","req","res","user","db","collection","findOne","email","body","compareSync","password","token","sign","userId","id","userEmail","expiresIn","status","json","data","isActive","message","success"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAME,OAAO,GAAGL,WAAW,EAA3B;AAEAK,OAAO,CAACC,GAAR,CAAYL,UAAZ;AAEAI,OAAO,CAACE,IAAR,CAAa,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7B,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,EAAJ,CAAOC,UAAP,CAAkB,MAAlB,EAA0BC,OAA1B,CAAkC;AAACC,IAAAA,KAAK,EAAEN,GAAG,CAACO,IAAJ,CAASD;AAAjB,GAAlC,CAAnB;;AAEA,MAAIJ,IAAI,IAAIR,MAAM,CAACc,WAAP,CAAmBR,GAAG,CAACO,IAAJ,CAASE,QAA5B,EAAsCP,IAAI,CAACO,QAA3C,CAAZ,EAAkE;AAC9D,UAAMC,KAAK,GAAGd,GAAG,CAACe,IAAJ,CACV;AACIC,MAAAA,MAAM,EAAEV,IAAI,CAACW,EADjB;AAEIC,MAAAA,SAAS,EAAEZ,IAAI,CAACI;AAFpB,KADU,EAKV,WALU,EAMV;AAAES,MAAAA,SAAS,EAAE;AAAb,KANU,CAAd;AASA,WAAOd,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAExBC,MAAAA,IAAI,EAAE;AACFN,QAAAA,MAAM,EAAEV,IAAI,CAACW,EADX;AAEFH,QAAAA,KAAK,EAAEA,KAFL;AAGFS,QAAAA,QAAQ,EAAE;AAHR,OAFkB;AAOxBC,MAAAA,OAAO,EAAE,oBAPe;AAQxBJ,MAAAA,MAAM,EAAE,GARgB;AASxBK,MAAAA,OAAO,EAAE;AATe,KAArB,CAAP;AAWH,GArBD,MAqBO;AACH,WAAOpB,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBG,MAAAA,OAAO,EAAE,oBADe;AAExBJ,MAAAA,MAAM,EAAE,GAFgB;AAGxBK,MAAAA,OAAO,EAAE;AAHe,KAArB,CAAP;AAKH;AACJ,CA/BD;AAiCA,eAAexB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '~/lib/mongodb';\n\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst handler = nextConnect();\n\nhandler.use(middleware);\n\nhandler.post(async (req, res) => {\n    const user = await req.db.collection('user').findOne({email: req.body.email})\n\n    if (user && bcrypt.compareSync(req.body.password, user.password)) { \n        const token = jwt.sign(\n            {\n                userId: user.id,\n                userEmail: user.email\n            },\n            \"bluestone\",\n            { expiresIn: '1d' }\n        )\n\n        return res.status(200).json({\n            \n            data: {\n                userId: user.id,\n                token: token,\n                isActive: true\n            },\n            message: \"Login successfully\",\n            status: 200,\n            success: true,\n        })\n    } else {\n        return res.status(400).json({ \n            message: 'Password is wrong!',\n            status: 400,\n            success: false,\n        });\n    }\n})\n\nexport default handler"]},"metadata":{},"sourceType":"module"}