{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nconst {\n  persistStore,\n  persistReducer\n} = require('redux-persist');\n\nconst storage = require('redux-persist/lib/storage').default;\n\nconst bindMiddleware = middleware => {\n  if (false) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst persistConfig = {\n  key: 'bluestone',\n  whitelist: ['auth'],\n  storage\n};\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  const store = createStore(persistedReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.__persistor = persistStore(store);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore);","map":null,"metadata":{},"sourceType":"module"}