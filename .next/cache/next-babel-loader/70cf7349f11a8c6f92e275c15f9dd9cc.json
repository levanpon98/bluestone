{"ast":null,"code":"import { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport UserRepository from '~/repositories/UserRepository';\nimport Cookie from 'js-cookie';\nimport { notification } from 'antd';\nimport { actionTypes, getUserFailure, getUserSuccess } from './action';\n\nconst showModal = (type, message, desc) => {\n  notification[type]({\n    message: message,\n    description: desc,\n    duration: 1\n  });\n};\n\nfunction* getUserSaga({\n  userId,\n  token\n}) {\n  try {\n    const userData = yield call(UserRepository.getUser, {\n      userId,\n      token\n    });\n    console.log(userData);\n    yield put(getUserSuccess(userData.data.data));\n  } catch (err) {\n    yield put(getUserFailure({}));\n  }\n}\n\nfunction* updateUser({\n  payload\n}) {\n  try {\n    const userData = yield call(UserRepository.updateUser, {\n      payload\n    });\n\n    if (userData.data.status == 200) {\n      showModal('success', 'Success!!', \"Update User Profile Success!!\");\n    } else {\n      showModal('error', 'Error!!', \"Update User Profile Fail!!\");\n    }\n  } catch (err) {\n    showModal('error', 'Error!!', \"Update User Profile Fail!!\");\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeLatest(actionTypes.GET_USER, getUserSaga), takeLatest(actionTypes.UPDATE_USER, updateUser)]);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/user/saga.js"],"names":["all","call","delay","put","take","takeLatest","UserRepository","Cookie","notification","actionTypes","getUserFailure","getUserSuccess","showModal","type","message","desc","description","duration","getUserSaga","userId","token","userData","getUser","console","log","data","err","updateUser","payload","status","rootSaga","GET_USER","UPDATE_USER"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACIC,WADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,UAJP;;AAMA,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,KAAyB;AACvCP,EAAAA,YAAY,CAACK,IAAD,CAAZ,CAAmB;AACfC,IAAAA,OAAO,EAAEA,OADM;AAEfE,IAAAA,WAAW,EAAED,IAFE;AAGfE,IAAAA,QAAQ,EAAE;AAHK,GAAnB;AAKH,CAND;;AAQA,UAAUC,WAAV,CAAsB;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAtB,EAAuC;AAEnC,MAAI;AAEA,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACK,cAAc,CAACgB,OAAhB,EAAyB;AAACH,MAAAA,MAAD;AAASC,MAAAA;AAAT,KAAzB,CAA3B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,UAAMlB,GAAG,CAACQ,cAAc,CAACU,QAAQ,CAACI,IAAT,CAAcA,IAAf,CAAf,CAAT;AACH,GALD,CAKE,OAAOC,GAAP,EAAY;AACV,UAAMvB,GAAG,CAACO,cAAc,CAAC,EAAD,CAAf,CAAT;AACH;AACJ;;AAED,UAAUiB,UAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAgC;AAC5B,MAAI;AACA,UAAMP,QAAQ,GAAG,MAAMpB,IAAI,CAACK,cAAc,CAACqB,UAAhB,EAA4B;AAACC,MAAAA;AAAD,KAA5B,CAA3B;;AACA,QAAIP,QAAQ,CAACI,IAAT,CAAcI,MAAd,IAAwB,GAA5B,EAAiC;AAC7BjB,MAAAA,SAAS,CAAC,SAAD,EAAY,WAAZ,EAAyB,+BAAzB,CAAT;AACH,KAFD,MAEO;AACHA,MAAAA,SAAS,CAAC,OAAD,EAAU,SAAV,EAAqB,4BAArB,CAAT;AACH;AACJ,GAPD,CAOE,OAAOc,GAAP,EAAY;AACVd,IAAAA,SAAS,CAAC,OAAD,EAAU,SAAV,EAAqB,4BAArB,CAAT;AACH;AACJ;;AAED,eAAe,UAAUkB,QAAV,GAAqB;AAChC,QAAM9B,GAAG,CAAC,CACNK,UAAU,CAACI,WAAW,CAACsB,QAAb,EAAuBb,WAAvB,CADJ,EAENb,UAAU,CAACI,WAAW,CAACuB,WAAb,EAA0BL,UAA1B,CAFJ,CAAD,CAAT;AAIH","sourcesContent":["import { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\nimport UserRepository from '~/repositories/UserRepository'\nimport Cookie from 'js-cookie';\nimport { notification } from 'antd';\n\nimport {\n    actionTypes,\n    getUserFailure,\n    getUserSuccess\n} from './action'\n\nconst showModal = (type, message, desc) => {\n    notification[type]({\n        message: message,\n        description: desc,\n        duration: 1,\n    });\n};\n\nfunction* getUserSaga({userId, token}) {\n   \n    try {\n        \n        const userData = yield call(UserRepository.getUser, {userId, token})\n        console.log(userData)\n        yield put(getUserSuccess(userData.data.data));\n    } catch (err) {\n        yield put(getUserFailure({}));\n    }\n}\n\nfunction* updateUser({payload}) {\n    try {\n        const userData = yield call(UserRepository.updateUser, {payload})\n        if (userData.data.status == 200) {\n            showModal('success', 'Success!!', \"Update User Profile Success!!\")\n        } else {\n            showModal('error', 'Error!!', \"Update User Profile Fail!!\")\n        }\n    } catch (err) {\n        showModal('error', 'Error!!', \"Update User Profile Fail!!\")\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        takeLatest(actionTypes.GET_USER, getUserSaga),\n        takeLatest(actionTypes.UPDATE_USER, updateUser),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}