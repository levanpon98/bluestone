{"ast":null,"code":"import { all, put, select, takeEvery, call } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { createSelector } from 'reselect';\nimport { actionTypes, updateInfoSuccess, updateInfoFail } from './action';\nimport Cookie from 'js-cookie';\n\nconst modal = (type, message, description) => {\n  notification[type]({\n    message: message,\n    description: description\n  });\n};\n\nfunction* updateInfoSaga() {\n  try {\n    yield put(updateInfoSuccess());\n  } catch (err) {\n    yield put(updateInfoFail(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.UPDATE_INFO, updateInfoSaga)]);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/checkout/saga.js"],"names":["all","put","select","takeEvery","call","notification","createSelector","actionTypes","updateInfoSuccess","updateInfoFail","Cookie","modal","type","message","description","updateInfoSaga","err","rootSaga","UPDATE_INFO"],"mappings":"AAAA,SACIA,GADJ,EAEIC,GAFJ,EAGIC,MAHJ,EAIIC,SAJJ,EAKIC,IALJ,QAMO,oBANP;AAOA,SACIC,YADJ,QAEO,MAFP;AAGA,SACIC,cADJ,QAEO,UAFP;AAGA,SACIC,WADJ,EAEIC,iBAFJ,EAGIC,cAHJ,QAIO,UAJP;AAKA,OAAOC,MAAP,MAAmB,WAAnB;;AAGA,MAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,WAAhB,KAAgC;AAC1CT,EAAAA,YAAY,CAACO,IAAD,CAAZ,CAAmB;AACfC,IAAAA,OAAO,EAAEA,OADM;AAEfC,IAAAA,WAAW,EAAEA;AAFE,GAAnB;AAIH,CALD;;AAOA,UAAUC,cAAV,GAA2B;AACvB,MAAI;AACA,UAAMd,GAAG,CAACO,iBAAiB,EAAlB,CAAT;AACH,GAFD,CAEE,OAAOQ,GAAP,EAAY;AACV,UAAMf,GAAG,CAACQ,cAAc,CAACO,GAAD,CAAf,CAAT;AACH;AACJ;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMjB,GAAG,CAAC,CAACG,SAAS,CAACI,WAAW,CAACW,WAAb,EAA0BH,cAA1B,CAAV,CAAD,CAAT;AACH","sourcesContent":["import {\n    all,\n    put,\n    select,\n    takeEvery,\n    call\n} from 'redux-saga/effects';\nimport {\n    notification\n} from 'antd';\nimport {\n    createSelector\n} from 'reselect';\nimport {\n    actionTypes,\n    updateInfoSuccess,\n    updateInfoFail\n} from './action';\nimport Cookie from 'js-cookie';\n\n\nconst modal = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description,\n    });\n};\n\nfunction* updateInfoSaga() {\n    try {\n        yield put(updateInfoSuccess());\n    } catch (err) {\n        yield put(updateInfoFail(err));\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.UPDATE_INFO, updateInfoSaga)]);\n}"]},"metadata":{},"sourceType":"module"}