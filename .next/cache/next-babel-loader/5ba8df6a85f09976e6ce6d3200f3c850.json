{"ast":null,"code":"import _toConsumableArray from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nvar _require = require('redux-persist'),\n    persistStore = _require.persistStore,\n    persistReducer = _require.persistReducer;\n\nvar storage = require('redux-persist/lib/storage')[\"default\"];\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require2 = require('redux-devtools-extension'),\n        composeWithDevTools = _require2.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nvar persistConfig = {\n  key: 'nextjs',\n  whitelist: ['auth', 'account', 'cart', 'checkout', 'wishlist', 'product', 'app', 'order'],\n  // make sure it does not clash with server keys\n  storage: storage\n};\nexport var makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var persistedReducer = persistReducer(persistConfig, rootReducer);\n  var store = createStore(persistedReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.__persistor = persistStore(store);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/store.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","rootSaga","createWrapper","require","persistStore","persistReducer","storage","bindMiddleware","middleware","composeWithDevTools","persistConfig","key","whitelist","makeStore","context","sagaMiddleware","persistedReducer","store","sagaTask","run","__persistor","wrapper"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,oBAA9B;;eACuCC,OAAO,CAAC,eAAD,C;IAAvCC,Y,YAAAA,Y;IAAcC,c,YAAAA,c;;AACrB,IAAMC,OAAO,GAAGH,OAAO,CAAC,2BAAD,CAAP,WAAhB;;AAEA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,UAAU,EAAI;AACjC,YAA2C;AAAA,oBACPL,OAAO,CAAC,0BAAD,CADA;AAAA,QAC/BM,mBAD+B,aAC/BA,mBAD+B;;AAEvC,WAAOA,mBAAmB,CAACZ,eAAe,MAAf,4BAAmBW,UAAnB,EAAD,CAA1B;AACH;;AACD,SAAOX,eAAe,MAAf,4BAAmBW,UAAnB,EAAP;AACH,CAND;;AAQA,IAAME,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,QADa;AAElBC,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,EAA4B,UAA5B,EAAwC,UAAxC,EAAoD,SAApD,EAA+D,KAA/D,EAAsE,OAAtE,CAFO;AAEyE;AAC3FN,EAAAA,OAAO,EAAPA;AAHkB,CAAtB;AAMA,OAAO,IAAMO,SAAS,GAAE,SAAXA,SAAW,CAACC,OAAD,EAAa;AACjC,MAAMC,cAAc,GAAGhB,oBAAoB,EAA3C;AACA,MAAMiB,gBAAgB,GAAGX,cAAc,CAACK,aAAD,EAAgBV,WAAhB,CAAvC;AACA,MAAMiB,KAAK,GAAGnB,WAAW,CAACkB,gBAAD,EAAmBT,cAAc,CAAC,CAACQ,cAAD,CAAD,CAAjC,CAAzB;AAEAE,EAAAA,KAAK,CAACC,QAAN,GAAiBH,cAAc,CAACI,GAAf,CAAmBlB,QAAnB,CAAjB;AACAgB,EAAAA,KAAK,CAACG,WAAN,GAAoBhB,YAAY,CAACa,KAAD,CAAhC;AACA,SAAOA,KAAP;AACH,CARM;AASP,OAAO,IAAMI,OAAO,GAAGnB,aAAa,CAACW,SAAD,CAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper'\nconst {persistStore, persistReducer} = require('redux-persist');\nconst storage = require('redux-persist/lib/storage').default;\n\nconst bindMiddleware = middleware => {\n    if (process.env.NODE_ENV !== 'production') {\n        const { composeWithDevTools } = require('redux-devtools-extension');\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n    return applyMiddleware(...middleware);\n};\n\nconst persistConfig = {\n    key: 'nextjs',\n    whitelist: ['auth', 'account', 'cart', 'checkout', 'wishlist', 'product', 'app', 'order'], // make sure it does not clash with server keys\n    storage\n};\n\nexport const makeStore =(context) => {\n    const sagaMiddleware = createSagaMiddleware()\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = createStore(persistedReducer, bindMiddleware([sagaMiddleware]))\n  \n    store.sagaTask = sagaMiddleware.run(rootSaga)\n    store.__persistor = persistStore(store); \n    return store\n}\nexport const wrapper = createWrapper(makeStore)\n\n"]},"metadata":{},"sourceType":"module"}