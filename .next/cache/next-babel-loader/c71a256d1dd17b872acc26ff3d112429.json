{"ast":null,"code":"import _regeneratorRuntime from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MongoClient } from 'mongodb';\nvar MONGODB_URI = process.env.MONGODB_URI;\nvar MONGODB_DB = process.env.MONGODB_DB;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nif (!MONGODB_DB) {\n  throw new Error('Please define the MONGODB_DB environment variable inside .env.local');\n}\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\n\n\nvar cached = global.mongo;\n\nif (!cached) {\n  cached = global.mongo = {\n    conn: null,\n    promise: null\n  };\n}\n\nexport function connectToDatabase() {\n  return _connectToDatabase.apply(this, arguments);\n}\n\nfunction _connectToDatabase() {\n  _connectToDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var opts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!cached.conn) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", cached.conn);\n\n          case 2:\n            if (!cached.promise) {\n              opts = {\n                useNewUrlParser: true,\n                useUnifiedTopology: true\n              };\n              cached.promise = MongoClient.connect(MONGODB_URI, opts).then(function (client) {\n                return {\n                  client: client,\n                  db: client.db(MONGODB_DB)\n                };\n              });\n            }\n\n            _context.next = 5;\n            return cached.promise;\n\n          case 5:\n            cached.conn = _context.sent;\n            return _context.abrupt(\"return\", cached.conn);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _connectToDatabase.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/lib/mongodb.js"],"names":["MongoClient","MONGODB_URI","process","env","MONGODB_DB","Error","cached","global","mongo","conn","promise","connectToDatabase","opts","useNewUrlParser","useUnifiedTopology","connect","then","client","db"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYF,WAAhC;AACA,IAAMG,UAAU,GAAGF,OAAO,CAACC,GAAR,CAAYC,UAA/B;;AAEA,IAAI,CAACH,WAAL,EAAkB;AAChB,QAAM,IAAII,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,IAAI,CAACD,UAAL,EAAiB;AACf,QAAM,IAAIC,KAAJ,CACJ,qEADI,CAAN;AAGD;AAED;AACA;AACA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,KAApB;;AAEA,IAAI,CAACF,MAAL,EAAa;AACXA,EAAAA,MAAM,GAAGC,MAAM,CAACC,KAAP,GAAe;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAAxB;AACD;;AAED,gBAAsBC,iBAAtB;AAAA;AAAA;;;gFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDL,MAAM,CAACG,IADN;AAAA;AAAA;AAAA;;AAAA,6CAEIH,MAAM,CAACG,IAFX;;AAAA;AAKL,gBAAI,CAACH,MAAM,CAACI,OAAZ,EAAqB;AACbE,cAAAA,IADa,GACN;AACXC,gBAAAA,eAAe,EAAE,IADN;AAEXC,gBAAAA,kBAAkB,EAAE;AAFT,eADM;AAMnBR,cAAAA,MAAM,CAACI,OAAP,GAAiBV,WAAW,CAACe,OAAZ,CAAoBd,WAApB,EAAiCW,IAAjC,EAAuCI,IAAvC,CAA4C,UAACC,MAAD,EAAY;AACvE,uBAAO;AACLA,kBAAAA,MAAM,EAANA,MADK;AAELC,kBAAAA,EAAE,EAAED,MAAM,CAACC,EAAP,CAAUd,UAAV;AAFC,iBAAP;AAID,eALgB,CAAjB;AAMD;;AAjBI;AAAA,mBAkBeE,MAAM,CAACI,OAlBtB;;AAAA;AAkBLJ,YAAAA,MAAM,CAACG,IAlBF;AAAA,6CAmBEH,MAAM,CAACG,IAnBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { MongoClient } from 'mongodb'\n\nconst MONGODB_URI = process.env.MONGODB_URI\nconst MONGODB_DB = process.env.MONGODB_DB\n\nif (!MONGODB_URI) {\n  throw new Error(\n    'Please define the MONGODB_URI environment variable inside .env.local'\n  )\n}\n\nif (!MONGODB_DB) {\n  throw new Error(\n    'Please define the MONGODB_DB environment variable inside .env.local'\n  )\n}\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\nlet cached = global.mongo\n\nif (!cached) {\n  cached = global.mongo = { conn: null, promise: null }\n}\n\nexport async function connectToDatabase() {\n  if (cached.conn) {\n    return cached.conn\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    }\n\n    cached.promise = MongoClient.connect(MONGODB_URI, opts).then((client) => {\n      return {\n        client,\n        db: client.db(MONGODB_DB),\n      }\n    })\n  }\n  cached.conn = await cached.promise\n  return cached.conn\n}\n"]},"metadata":{},"sourceType":"module"}