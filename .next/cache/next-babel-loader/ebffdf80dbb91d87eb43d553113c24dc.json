{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { actionTypes } from './action';\nimport { HYDRATE } from 'next-redux-wrapper';\nexport const initState = {\n  user: {}\n};\n\nfunction reducer(state = initState, action) {\n  switch (action.type) {\n    case actionTypes.GET_USER:\n      return _objectSpread(_objectSpread(_objectSpread({}, state), {\n        userId: action.userId\n      }), {\n        token: action.token\n      });\n\n    case actionTypes.GET_USER_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {\n        user: action.data\n      });\n\n    case actionTypes.GET_USER_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/user/reducer.js"],"names":["actionTypes","HYDRATE","initState","user","reducer","state","action","type","GET_USER","userId","token","GET_USER_SUCCESS","data","GET_USER_FAILURE","error"],"mappings":";;;;;;AAAA,SACIA,WADJ,QAEO,UAFP;AAGA,SACIC,OADJ,QAEO,oBAFP;AAIA,OAAO,MAAMC,SAAS,GAAG;AACrBC,EAAAA,IAAI,EAAE;AADe,CAAlB;;AAIP,SAASC,OAAT,CAAiBC,KAAK,GAAGH,SAAzB,EAAoCI,MAApC,EAA4C;AACxC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,QAAjB;AACI,2DACOH,KADP,GAEO;AAAEI,QAAAA,MAAM,EAAEH,MAAM,CAACG;AAAjB,OAFP,GAGO;AAAEC,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAAhB,OAHP;;AAKJ,SAAKV,WAAW,CAACW,gBAAjB;AACI,6CACON,KADP,GAEO;AACCF,QAAAA,IAAI,EAAEG,MAAM,CAACM;AADd,OAFP;;AAMJ,SAAKZ,WAAW,CAACa,gBAAjB;AACI,6CACOR,KADP,GAEO;AACCS,QAAAA,KAAK,EAAER,MAAM,CAACQ;AADf,OAFP;;AAOJ;AACI,aAAOT,KAAP;AAvBR;AAyBH;;AAED,eAAeD,OAAf","sourcesContent":["import {\n    actionTypes\n} from './action'\nimport {\n    HYDRATE\n} from 'next-redux-wrapper'\n\nexport const initState = {\n    user: {}\n}\n\nfunction reducer(state = initState, action) {\n    switch (action.type) {\n        case actionTypes.GET_USER:\n            return {\n                ...state,\n                ...{ userId: action.userId},\n                ...{ token: action.token},\n            }\n        case actionTypes.GET_USER_SUCCESS:\n            return {\n                ...state,\n                ...{\n                    user: action.data\n                },\n            };\n        case actionTypes.GET_USER_FAILURE:\n            return {\n                ...state,\n                ...{\n                    error: action.error\n                }\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}