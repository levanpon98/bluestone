{"ast":null,"code":"import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport PaymentRepository from '~/repositories/PaymentRepository';\nimport { actionTypes, getCartError, getCartSuccess, updateCartSuccess, updateCartError } from './action';\n\nconst modalSuccess = type => {\n  notification[type]({\n    message: 'Success',\n    description: 'This product has been added to your cart!',\n    duration: 1\n  });\n};\n\nconst modalWarning = type => {\n  notification[type]({\n    message: 'Remove A Item',\n    description: 'This product has been removed from your cart!',\n    duration: 1\n  });\n};\n\nexport const calculateAmount = obj => Object.values(obj).reduce((acc, {\n  quantity,\n  price\n}) => acc + quantity * price, 0).toFixed(2);\n\nfunction* getCartSaga() {\n  try {\n    yield put(getCartSuccess());\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* addItemSaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    const localCart = JSON.parse(localStorage.getItem('persist:nextjs')).cart;\n    let currentCart = JSON.parse(localCart);\n    currentCart.cartItems.push(product); // currentCart.amount = calculateAmount(currentCart.cartItems);\n\n    currentCart.cartTotal++;\n    yield put(updateCartSuccess(currentCart));\n    modalSuccess('success');\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* removeItemSaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    let localCart = JSON.parse(JSON.parse(localStorage.getItem('persist:nextjs')).cart);\n    let index = localCart.cartItems.findIndex(item => item.id === product.id);\n    localCart.cartTotal = localCart.cartTotal - product.quantity;\n    localCart.cartItems.splice(index, 1);\n    localCart.amount = calculateAmount(localCart.cartItems);\n\n    if (localCart.cartItems.length === 0) {\n      localCart.cartItems = [];\n      localCart.amount = 0;\n      localCart.cartTotal = 0;\n    }\n\n    yield put(updateCartSuccess(localCart));\n    modalWarning('warning');\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* increaseQtySaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    let localCart = JSON.parse(JSON.parse(localStorage.getItem('persist:nextjs')).cart);\n    let selectedItem = localCart.cartItems.find(item => item.id === product.id);\n\n    if (selectedItem) {\n      selectedItem.quantity++;\n      localCart.cartTotal++;\n      localCart.amount = calculateAmount(localCart.cartItems);\n    }\n\n    yield put(updateCartSuccess(localCart));\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* decreaseItemQtySaga(payload) {\n  try {\n    const {\n      product\n    } = payload;\n    const localCart = JSON.parse(JSON.parse(localStorage.getItem('persist:nextjs')).cart);\n    let selectedItem = localCart.cartItems.find(item => item.id === product.id);\n\n    if (selectedItem) {\n      selectedItem.quantity--;\n      localCart.cartTotal--;\n      localCart.amount = calculateAmount(localCart.cartItems);\n    }\n\n    yield put(updateCartSuccess(localCart));\n  } catch (err) {\n    yield put(getCartError(err));\n  }\n}\n\nfunction* clearCartSaga() {\n  try {\n    const emptyCart = {\n      cartItems: [],\n      amount: 0,\n      cartTotal: 0\n    };\n    yield put(updateCartSuccess(emptyCart));\n  } catch (err) {\n    yield put(updateCartError(err));\n  }\n}\n\nfunction* savePaymentSaga({\n  payment_detail\n}) {\n  try {\n    const res = yield call(PaymentRepository.savePayment, payment_detail);\n    const response = res.data;\n\n    if (response.status == 200) {\n      const emptyCart = {\n        cartItems: [],\n        amount: 0,\n        cartTotal: 0\n      };\n      yield put(updateCartSuccess(emptyCart));\n    }\n  } catch (error) {\n    yield put(updateCartError(error));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_CART, getCartSaga)]);\n  yield all([takeEvery(actionTypes.ADD_ITEM, addItemSaga)]);\n  yield all([takeEvery(actionTypes.REMOVE_ITEM, removeItemSaga)]);\n  yield all([takeEvery(actionTypes.INCREASE_QTY, increaseQtySaga)]);\n  yield all([takeEvery(actionTypes.DECREASE_QTY, decreaseItemQtySaga)]);\n  yield all([takeEvery(actionTypes.CLEAR_CART, clearCartSaga)]);\n  yield all([takeEvery(actionTypes.SAVE_PAYMENT, savePaymentSaga)]);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/cart/saga.js"],"names":["all","put","takeEvery","call","notification","PaymentRepository","actionTypes","getCartError","getCartSuccess","updateCartSuccess","updateCartError","modalSuccess","type","message","description","duration","modalWarning","calculateAmount","obj","Object","values","reduce","acc","quantity","price","toFixed","getCartSaga","err","addItemSaga","payload","product","localCart","JSON","parse","localStorage","getItem","cart","currentCart","cartItems","push","cartTotal","removeItemSaga","index","findIndex","item","id","splice","amount","length","increaseQtySaga","selectedItem","find","decreaseItemQtySaga","clearCartSaga","emptyCart","savePaymentSaga","payment_detail","res","savePayment","response","data","status","error","rootSaga","GET_CART","ADD_ITEM","REMOVE_ITEM","INCREASE_QTY","DECREASE_QTY","CLEAR_CART","SAVE_PAYMENT"],"mappings":"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","sourcesContent":["import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport PaymentRepository from '~/repositories/PaymentRepository'\nimport {\n    actionTypes,\n    getCartError,\n    getCartSuccess,\n    updateCartSuccess,\n    updateCartError,\n} from './action';\n\nconst modalSuccess = (type) => {\n    notification[type]({\n        message: 'Success',\n        description: 'This product has been added to your cart!',\n        duration: 1,\n    });\n};\nconst modalWarning = (type) => {\n    notification[type]({\n        message: 'Remove A Item',\n        description: 'This product has been removed from your cart!',\n        duration: 1,\n    });\n};\n\nexport const calculateAmount = (obj) =>\n    Object.values(obj)\n        .reduce((acc, { quantity, price }) => acc + quantity * price, 0)\n        .toFixed(2);\n\nfunction* getCartSaga() {\n    try {\n        yield put(getCartSuccess());\n    } catch (err) {\n        yield put(getCartError(err));\n    }\n}\n\nfunction* addItemSaga(payload) {\n    try {\n        const { product } = payload;\n        const localCart = JSON.parse(localStorage.getItem('persist:nextjs')).cart;\n        let currentCart = JSON.parse(localCart);\n        \n        currentCart.cartItems.push(product);\n        // currentCart.amount = calculateAmount(currentCart.cartItems);\n        currentCart.cartTotal++;\n        yield put(updateCartSuccess(currentCart));\n        modalSuccess('success');\n    } catch (err) {\n        yield put(getCartError(err));\n    }\n}\n\nfunction* removeItemSaga(payload) {\n    try {\n        const { product } = payload;\n        let localCart = JSON.parse(\n            JSON.parse(localStorage.getItem('persist:nextjs')).cart\n        );\n        let index = localCart.cartItems.findIndex(\n            (item) => item.id === product.id\n        );\n        localCart.cartTotal = localCart.cartTotal - product.quantity;\n        localCart.cartItems.splice(index, 1);\n        localCart.amount = calculateAmount(localCart.cartItems);\n        if (localCart.cartItems.length === 0) {\n            localCart.cartItems = [];\n            localCart.amount = 0;\n            localCart.cartTotal = 0;\n        }\n        yield put(updateCartSuccess(localCart));\n        modalWarning('warning');\n    } catch (err) {\n        yield put(getCartError(err));\n    }\n}\n\nfunction* increaseQtySaga(payload) {\n    try {\n        const { product } = payload;\n        let localCart = JSON.parse(\n            JSON.parse(localStorage.getItem('persist:nextjs')).cart\n        );\n        let selectedItem = localCart.cartItems.find(\n            (item) => item.id === product.id\n        );\n        if (selectedItem) {\n            selectedItem.quantity++;\n            localCart.cartTotal++;\n            localCart.amount = calculateAmount(localCart.cartItems);\n        }\n        yield put(updateCartSuccess(localCart));\n    } catch (err) {\n        yield put(getCartError(err));\n    }\n}\n\nfunction* decreaseItemQtySaga(payload) {\n    try {\n        const { product } = payload;\n        const localCart = JSON.parse(\n            JSON.parse(localStorage.getItem('persist:nextjs')).cart\n        );\n        let selectedItem = localCart.cartItems.find(\n            (item) => item.id === product.id\n        );\n\n        if (selectedItem) {\n            selectedItem.quantity--;\n            localCart.cartTotal--;\n            localCart.amount = calculateAmount(localCart.cartItems);\n        }\n        yield put(updateCartSuccess(localCart));\n    } catch (err) {\n        yield put(getCartError(err));\n    }\n}\n\nfunction* clearCartSaga() {\n    try {\n        const emptyCart = {\n            cartItems: [],\n            amount: 0,\n            cartTotal: 0,\n        };\n        yield put(updateCartSuccess(emptyCart));\n    } catch (err) {\n        yield put(updateCartError(err));\n    }\n}\n\nfunction* savePaymentSaga({payment_detail}) {\n    try{\n        const res = yield call(PaymentRepository.savePayment, payment_detail)\n        const response = res.data\n        if (response.status == 200) {\n            const emptyCart = {\n                cartItems: [],\n                amount: 0,\n                cartTotal: 0,\n            };\n            yield put(updateCartSuccess(emptyCart));\n        }\n\n    } catch (error) {\n        yield put(updateCartError(error))\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.GET_CART, getCartSaga)]);\n    yield all([takeEvery(actionTypes.ADD_ITEM, addItemSaga)]);\n    yield all([takeEvery(actionTypes.REMOVE_ITEM, removeItemSaga)]);\n    yield all([takeEvery(actionTypes.INCREASE_QTY, increaseQtySaga)]);\n    yield all([takeEvery(actionTypes.DECREASE_QTY, decreaseItemQtySaga)]);\n    yield all([takeEvery(actionTypes.CLEAR_CART, clearCartSaga)]);\n    yield all([takeEvery(actionTypes.SAVE_PAYMENT, savePaymentSaga)]);\n}\n"]},"metadata":{},"sourceType":"module"}