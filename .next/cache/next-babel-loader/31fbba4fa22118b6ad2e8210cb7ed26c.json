{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\nimport Cookie from 'js-cookie';\n\nclass UserRepository {\n  login(values) {\n    const res = Repository.post(`${baseUrl}/users/login`, values);\n    return res;\n  }\n\n  async register(values) {\n    const reponse = await Repository.post(`${baseUrl}/users/register`, values).then(response => {\n      return response;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n  }\n\n  async getUser(userId, token) {\n    const response = await Repository.get(`${baseUrl}/users/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (response.data.status == 200) {\n      return response.data.data;\n    } else {\n      return null;\n    }\n  }\n\n  updateUser({\n    payload\n  }) {\n    const res = Repository.post(`${baseUrl}/users/${payload.userId}`, payload.values, {\n      headers: {\n        'Authorization': `Bearer ${payload.token}`\n      }\n    });\n    return res;\n  }\n\n}\n\nexport default new UserRepository();","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/repositories/UserRepository.js"],"names":["Repository","baseUrl","Cookie","UserRepository","login","values","res","post","register","reponse","then","response","catch","error","JSON","stringify","getUser","userId","token","get","headers","Authorization","data","status","updateUser","payload"],"mappings":"AAAA,OAAOA,UAAP,IACIC,OADJ,QAEO,cAFP;AAGA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACV,UAAMC,GAAG,GAAGN,UAAU,CAACO,IAAX,CAAiB,GAAEN,OAAQ,cAA3B,EAA0CI,MAA1C,CAAZ;AACA,WAAOC,GAAP;AACH;;AAED,QAAME,QAAN,CAAeH,MAAf,EAAuB;AACnB,UAAMI,OAAO,GAAG,MAAMT,UAAU,CAACO,IAAX,CAAiB,GAAEN,OAAQ,iBAA3B,EAA6CI,MAA7C,EACrBK,IADqB,CACfC,QAAD,IAAc;AAChB,aAAOA,QAAP;AACH,KAHqB,EAIrBC,KAJqB,CAIdC,KAAD,KAAY;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAZ,CAJe,CAAtB;AAMH;;AAED,QAAMG,OAAN,CAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AAEzB,UAAMP,QAAQ,GAAG,MAAMX,UAAU,CAACmB,GAAX,CAAgB,GAAElB,OAAQ,UAASgB,MAAO,EAA1C,EAA6C;AAChEG,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASH,KAAM;AAD1B;AADuD,KAA7C,CAAvB;;AAKA,QAAIP,QAAQ,CAACW,IAAT,CAAcC,MAAd,IAAwB,GAA5B,EAAgC;AAC5B,aAAOZ,QAAQ,CAACW,IAAT,CAAcA,IAArB;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AAEJ;;AAEDE,EAAAA,UAAU,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAY;AAClB,UAAMnB,GAAG,GAAGN,UAAU,CAACO,IAAX,CAAiB,GAAEN,OAAQ,UAASwB,OAAO,CAACR,MAAO,EAAnD,EAAsDQ,OAAO,CAACpB,MAA9D,EAAsE;AAC9Ee,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAASK,OAAO,CAACP,KAAM;AADpC;AADqE,KAAtE,CAAZ;AAKA,WAAOZ,GAAP;AAEH;;AAtCgB;;AAyCrB,eAAe,IAAIH,cAAJ,EAAf","sourcesContent":["import Repository, {\n    baseUrl\n} from './Repository';\nimport Cookie from 'js-cookie';\n\nclass UserRepository {\n    login(values) {\n        const res = Repository.post(`${baseUrl}/users/login`, values)\n        return res;\n    }\n\n    async register(values) {\n        const reponse = await Repository.post(`${baseUrl}/users/register`, values)\n        .then((response) => {\n            return response;\n        })\n        .catch((error) => ({ error: JSON.stringify(error) }));\n        \n    }\n\n    async getUser(userId, token) {\n       \n        const response = await Repository.get(`${baseUrl}/users/${userId}`, {\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        if (response.data.status == 200){\n            return response.data.data\n        } else {\n            return null\n        }\n        \n    }\n\n    updateUser({payload}) { \n        const res = Repository.post(`${baseUrl}/users/${payload.userId}`, payload.values, {\n            headers: {\n                'Authorization': `Bearer ${payload.token}`,\n            }\n        })\n        return res\n        \n    }\n}\n\nexport default new UserRepository();"]},"metadata":{},"sourceType":"module"}