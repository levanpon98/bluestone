{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nconst {\n  persistStore,\n  persistReducer\n} = require('redux-persist');\n\nconst storage = require('redux-persist/lib/storage').default;\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst persistConfig = {\n  key: 'nextjs',\n  whitelist: ['auth'],\n  // make sure it does not clash with server keys\n  storage\n};\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n  const store = createStore(persistedReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.__persistor = persistStore(store);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/store.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","rootSaga","createWrapper","persistStore","persistReducer","require","storage","default","bindMiddleware","middleware","composeWithDevTools","persistConfig","key","whitelist","makeStore","context","sagaMiddleware","persistedReducer","store","sagaTask","run","__persistor","wrapper"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,oBAA9B;;AACA,MAAM;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,IAAiCC,OAAO,CAAC,eAAD,CAA9C;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCE,OAArD;;AAEA,MAAMC,cAAc,GAAGC,UAAU,IAAI;AACjC,YAA2C;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAA0BL,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOK,mBAAmB,CAACb,eAAe,CAAC,GAAGY,UAAJ,CAAhB,CAA1B;AACH;;AACD,SAAOZ,eAAe,CAAC,GAAGY,UAAJ,CAAtB;AACH,CAND;;AAQA,MAAME,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,QADa;AAElBC,EAAAA,SAAS,EAAE,CAAC,MAAD,CAFO;AAEG;AACrBP,EAAAA;AAHkB,CAAtB;AAMA,OAAO,MAAMQ,SAAS,GAAGC,OAAD,IAAa;AACjC,QAAMC,cAAc,GAAGjB,oBAAoB,EAA3C;AACA,QAAMkB,gBAAgB,GAAGb,cAAc,CAACO,aAAD,EAAgBX,WAAhB,CAAvC;AACA,QAAMkB,KAAK,GAAGpB,WAAW,CAACmB,gBAAD,EAAmBT,cAAc,CAAC,CAACQ,cAAD,CAAD,CAAjC,CAAzB;AAEAE,EAAAA,KAAK,CAACC,QAAN,GAAiBH,cAAc,CAACI,GAAf,CAAmBnB,QAAnB,CAAjB;AACAiB,EAAAA,KAAK,CAACG,WAAN,GAAoBlB,YAAY,CAACe,KAAD,CAAhC;AACA,SAAOA,KAAP;AACH,CARM;AASP,OAAO,MAAMI,OAAO,GAAGpB,aAAa,CAACY,SAAD,CAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper'\nconst {persistStore, persistReducer} = require('redux-persist');\nconst storage = require('redux-persist/lib/storage').default;\n\nconst bindMiddleware = middleware => {\n    if (process.env.NODE_ENV !== 'production') {\n        const { composeWithDevTools } = require('redux-devtools-extension');\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n    return applyMiddleware(...middleware);\n};\n\nconst persistConfig = {\n    key: 'nextjs',\n    whitelist: ['auth'], // make sure it does not clash with server keys\n    storage\n};\n\nexport const makeStore =(context) => {\n    const sagaMiddleware = createSagaMiddleware()\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = createStore(persistedReducer, bindMiddleware([sagaMiddleware]))\n  \n    store.sagaTask = sagaMiddleware.run(rootSaga)\n    store.__persistor = persistStore(store); \n    return store\n}\nexport const wrapper = createWrapper(makeStore)\n\n"]},"metadata":{},"sourceType":"module"}