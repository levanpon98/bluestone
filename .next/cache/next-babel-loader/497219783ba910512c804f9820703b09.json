{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst MONGODB_URI = process.env.MONGODB_URI;\nconst MONGODB_DB = process.env.MONGODB_DB;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nif (!MONGODB_DB) {\n  throw new Error('Please define the MONGODB_DB environment variable inside .env.local');\n}\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\n\n\nlet cached = global.mongo;\n\nif (!cached) {\n  cached = global.mongo = {\n    conn: null,\n    promise: null\n  };\n}\n\nexport async function connectToDatabase() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    };\n    cached.promise = MongoClient.connect(MONGODB_URI, opts).then(client => {\n      return {\n        client,\n        db: client.db(MONGODB_DB)\n      };\n    });\n  }\n\n  cached.conn = await cached.promise;\n  return cached.conn;\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/lib/mongodb.js"],"names":["MongoClient","MONGODB_URI","process","env","MONGODB_DB","Error","cached","global","mongo","conn","promise","connectToDatabase","opts","useNewUrlParser","useUnifiedTopology","connect","then","client","db"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYF,WAAhC;AACA,MAAMG,UAAU,GAAGF,OAAO,CAACC,GAAR,CAAYC,UAA/B;;AAEA,IAAI,CAACH,WAAL,EAAkB;AAChB,QAAM,IAAII,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED,IAAI,CAACD,UAAL,EAAiB;AACf,QAAM,IAAIC,KAAJ,CACJ,qEADI,CAAN;AAGD;AAED;AACA;AACA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,KAApB;;AAEA,IAAI,CAACF,MAAL,EAAa;AACXA,EAAAA,MAAM,GAAGC,MAAM,CAACC,KAAP,GAAe;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAAxB;AACD;;AAED,OAAO,eAAeC,iBAAf,GAAmC;AACxC,MAAIL,MAAM,CAACG,IAAX,EAAiB;AACf,WAAOH,MAAM,CAACG,IAAd;AACD;;AAED,MAAI,CAACH,MAAM,CAACI,OAAZ,EAAqB;AACnB,UAAME,IAAI,GAAG;AACXC,MAAAA,eAAe,EAAE,IADN;AAEXC,MAAAA,kBAAkB,EAAE;AAFT,KAAb;AAKAR,IAAAA,MAAM,CAACI,OAAP,GAAiBV,WAAW,CAACe,OAAZ,CAAoBd,WAApB,EAAiCW,IAAjC,EAAuCI,IAAvC,CAA6CC,MAAD,IAAY;AACvE,aAAO;AACLA,QAAAA,MADK;AAELC,QAAAA,EAAE,EAAED,MAAM,CAACC,EAAP,CAAUd,UAAV;AAFC,OAAP;AAID,KALgB,CAAjB;AAMD;;AACDE,EAAAA,MAAM,CAACG,IAAP,GAAc,MAAMH,MAAM,CAACI,OAA3B;AACA,SAAOJ,MAAM,CAACG,IAAd;AACD","sourcesContent":["import { MongoClient } from 'mongodb'\n\nconst MONGODB_URI = process.env.MONGODB_URI\nconst MONGODB_DB = process.env.MONGODB_DB\n\nif (!MONGODB_URI) {\n  throw new Error(\n    'Please define the MONGODB_URI environment variable inside .env.local'\n  )\n}\n\nif (!MONGODB_DB) {\n  throw new Error(\n    'Please define the MONGODB_DB environment variable inside .env.local'\n  )\n}\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\nlet cached = global.mongo\n\nif (!cached) {\n  cached = global.mongo = { conn: null, promise: null }\n}\n\nexport async function connectToDatabase() {\n  if (cached.conn) {\n    return cached.conn\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    }\n\n    cached.promise = MongoClient.connect(MONGODB_URI, opts).then((client) => {\n      return {\n        client,\n        db: client.db(MONGODB_DB),\n      }\n    })\n  }\n  cached.conn = await cached.promise\n  return cached.conn\n}\n"]},"metadata":{},"sourceType":"module"}