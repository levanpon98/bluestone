{"ast":null,"code":"import { all, put, select, takeEvery, call } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { createSelector } from 'reselect';\nimport { actionTypes, loginFailure, loginSuccess, registerFailure, registerSuccess, logoutSuccess } from './action';\nimport Cookie from 'js-cookie';\nimport UserRepository from '~/repositories/UserRepository';\n\nconst modal = (type, message, description) => {\n  notification[type]({\n    message: message,\n    description: description\n  });\n};\n\nfunction* loginSaga(action) {\n  const {\n    email,\n    password,\n    route\n  } = action.payload;\n\n  try {\n    console.log(email);\n    console.log(password);\n    const res = yield call(UserRepository.login, {\n      email,\n      password\n    });\n    const response = res.data.data;\n\n    if (res.data.status == 200) {\n      Cookie.set('jwt', response.token);\n      Cookie.set('userId', response.userId);\n      yield put(loginSuccess(response));\n      modal('success', \"Login Successfully!!!\", \"Welcome Back!!!\");\n      route.push('/');\n    } else {\n      yield put(loginFailure('Wrong username/password.'));\n      modal('warning', \"Login Fail\", \"Wrong username/password.\");\n    }\n  } catch (err) {\n    yield put(loginFailure('Something went wrong.'));\n    modal('warning', \"Login Fail\", \"Wrong username/password.\");\n  }\n}\n\nfunction* registerSaga() {\n  yield put(loggingIn(true));\n  const email = yield select(selectEmail());\n  const password = yield select(selectPassword());\n\n  try {\n    const res = yield fetch('http://localhost:1337/api/v1/users/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n\n    if (res.ok) {\n      yield put(registerSuccess());\n    } else {\n      yield put(registerFailure());\n      modal('warning', \"Register Fail\", \"Email is already used!!!\");\n    }\n  } catch (err) {\n    yield put(registerFailure('Something went wrong.'));\n  }\n}\n\nfunction* logoutSaga(action) {\n  Cookie.remove('jwt');\n  Cookie.remove('userId');\n  yield put(logoutSuccess({}));\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.LOGIN, loginSaga)]);\n  yield all([takeEvery(actionTypes.LOGOUT, logoutSaga)]);\n  yield all([takeEvery(actionTypes.REGISTER, registerSaga)]);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/auth/saga.js"],"names":["all","put","select","takeEvery","call","notification","createSelector","actionTypes","loginFailure","loginSuccess","registerFailure","registerSuccess","logoutSuccess","Cookie","UserRepository","modal","type","message","description","loginSaga","action","email","password","route","payload","console","log","res","login","response","data","status","set","token","userId","push","err","registerSaga","loggingIn","selectEmail","selectPassword","fetch","method","headers","body","JSON","stringify","ok","logoutSaga","remove","rootSaga","LOGIN","LOGOUT","REGISTER"],"mappings":"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","sourcesContent":["import {\n    all,\n    put,\n    select,\n    takeEvery,\n    call\n} from 'redux-saga/effects';\nimport {\n    notification\n} from 'antd';\nimport {\n    createSelector\n} from 'reselect';\nimport {\n    actionTypes,\n    loginFailure,\n    loginSuccess,\n    registerFailure,\n    registerSuccess,\n    logoutSuccess\n} from './action';\nimport Cookie from 'js-cookie';\nimport UserRepository from '~/repositories/UserRepository'\n\nconst modal = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description,\n    });\n};\n\n\nfunction* loginSaga(action) {\n\n    const {\n        email,\n        password,\n        route\n    } = action.payload\n    try {\n        console.log(email)\n        console.log(password)\n        const res = yield call(UserRepository.login, {\n            email,\n            password\n        });\n        const response = res.data.data\n        if (res.data.status == 200) {\n            Cookie.set('jwt', response.token)\n            Cookie.set('userId', response.userId)\n            yield put(loginSuccess(response));\n            modal('success', \"Login Successfully!!!\", \"Welcome Back!!!\")\n            route.push('/')\n        } else {\n            yield put(loginFailure('Wrong username/password.'));\n            modal('warning', \"Login Fail\", \"Wrong username/password.\")\n        }\n    } catch (err) {\n        yield put(loginFailure('Something went wrong.'));\n        modal('warning', \"Login Fail\", \"Wrong username/password.\")\n    }\n}\n\n\nfunction* registerSaga() {\n    yield put(loggingIn(true));\n    const email = yield select(selectEmail());\n    const password = yield select(selectPassword());\n\n    try {\n        const res = yield fetch('http://localhost:1337/api/v1/users/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        });\n\n        if (res.ok) {\n            yield put(registerSuccess());\n        } else {\n            yield put(registerFailure());\n            modal('warning', \"Register Fail\", \"Email is already used!!!\")\n        }\n    } catch (err) {\n        yield put(registerFailure('Something went wrong.'));\n    }\n}\n\n\nfunction* logoutSaga(action) {\n    Cookie.remove('jwt');\n    Cookie.remove('userId');\n    \n    yield put(logoutSuccess({}))\n}\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.LOGIN, loginSaga)]);\n    yield all([takeEvery(actionTypes.LOGOUT, logoutSaga)]);\n    yield all([takeEvery(actionTypes.REGISTER, registerSaga)]);\n}"]},"metadata":{},"sourceType":"module"}