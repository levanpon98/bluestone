{"ast":null,"code":"import _toConsumableArray from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nvar _require = require('redux-persist'),\n    persistStore = _require.persistStore,\n    persistReducer = _require.persistReducer;\n\nvar storage = require('redux-persist/lib/storage')[\"default\"];\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (false) {\n    var _require2 = require('redux-devtools-extension'),\n        composeWithDevTools = _require2.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nvar persistConfig = {\n  key: 'bluestone',\n  whitelist: ['auth'],\n  storage: storage\n};\nexport var makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var persistedReducer = persistReducer(persistConfig, rootReducer);\n  var store = createStore(persistedReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.__persistor = persistStore(store);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore);","map":null,"metadata":{},"sourceType":"module"}