{"ast":null,"code":"import _regeneratorRuntime from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(registerSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logoutSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, select, takeEvery, call } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport { createSelector } from 'reselect';\nimport { actionTypes, loginFailure, loginSuccess, registerFailure, registerSuccess, logoutSuccess } from './action';\nimport Cookie from 'js-cookie';\nimport UserRepository from '~/repositories/UserRepository';\n\nvar modal = function modal(type, message, description) {\n  notification[type]({\n    message: message,\n    description: description\n  });\n};\n\nfunction loginSaga(action) {\n  var _action$payload, email, password, route, res, response;\n\n  return _regeneratorRuntime.wrap(function loginSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _action$payload = action.payload, email = _action$payload.email, password = _action$payload.password, route = _action$payload.route;\n          _context.prev = 1;\n          console.log(email);\n          console.log(password);\n          _context.next = 6;\n          return call(UserRepository.login, {\n            email: email,\n            password: password\n          });\n\n        case 6:\n          res = _context.sent;\n          response = res.data.data;\n\n          if (!(res.data.status == 200)) {\n            _context.next = 17;\n            break;\n          }\n\n          Cookie.set('jwt', response.token);\n          Cookie.set('userId', response.userId);\n          _context.next = 13;\n          return put(loginSuccess(response));\n\n        case 13:\n          modal('success', \"Login Successfully!!!\", \"Welcome Back!!!\");\n          route.push('/');\n          _context.next = 20;\n          break;\n\n        case 17:\n          _context.next = 19;\n          return put(loginFailure('Wrong username/password.'));\n\n        case 19:\n          modal('warning', \"Login Fail\", \"Wrong username/password.\");\n\n        case 20:\n          _context.next = 27;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 26;\n          return put(loginFailure('Something went wrong.'));\n\n        case 26:\n          modal('warning', \"Login Fail\", \"Wrong username/password.\");\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 22]]);\n}\n\nfunction registerSaga() {\n  var email, password, res;\n  return _regeneratorRuntime.wrap(function registerSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(loggingIn(true));\n\n        case 2:\n          _context2.next = 4;\n          return select(selectEmail());\n\n        case 4:\n          email = _context2.sent;\n          _context2.next = 7;\n          return select(selectPassword());\n\n        case 7:\n          password = _context2.sent;\n          _context2.prev = 8;\n          _context2.next = 11;\n          return fetch('http://localhost:1337/api/v1/users/register', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          });\n\n        case 11:\n          res = _context2.sent;\n\n          if (!res.ok) {\n            _context2.next = 17;\n            break;\n          }\n\n          _context2.next = 15;\n          return put(registerSuccess());\n\n        case 15:\n          _context2.next = 20;\n          break;\n\n        case 17:\n          _context2.next = 19;\n          return put(registerFailure());\n\n        case 19:\n          modal('warning', \"Register Fail\", \"Email is already used!!!\");\n\n        case 20:\n          _context2.next = 26;\n          break;\n\n        case 22:\n          _context2.prev = 22;\n          _context2.t0 = _context2[\"catch\"](8);\n          _context2.next = 26;\n          return put(registerFailure('Something went wrong.'));\n\n        case 26:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[8, 22]]);\n}\n\nfunction logoutSaga(action) {\n  return _regeneratorRuntime.wrap(function logoutSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          Cookie.remove('jwt');\n          Cookie.remove('userId');\n          _context3.next = 4;\n          return put(logoutSuccess({}));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actionTypes.LOGIN, loginSaga)]);\n\n        case 2:\n          _context4.next = 4;\n          return all([takeEvery(actionTypes.LOGOUT, logoutSaga)]);\n\n        case 4:\n          _context4.next = 6;\n          return all([takeEvery(actionTypes.REGISTER, registerSaga)]);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/auth/saga.js"],"names":["loginSaga","registerSaga","logoutSaga","rootSaga","all","put","select","takeEvery","call","notification","createSelector","actionTypes","loginFailure","loginSuccess","registerFailure","registerSuccess","logoutSuccess","Cookie","UserRepository","modal","type","message","description","action","payload","email","password","route","console","log","login","res","response","data","status","set","token","userId","push","loggingIn","selectEmail","selectPassword","fetch","method","headers","body","JSON","stringify","ok","remove","LOGIN","LOGOUT","REGISTER"],"mappings":"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","sourcesContent":["import {\n    all,\n    put,\n    select,\n    takeEvery,\n    call\n} from 'redux-saga/effects';\nimport {\n    notification\n} from 'antd';\nimport {\n    createSelector\n} from 'reselect';\nimport {\n    actionTypes,\n    loginFailure,\n    loginSuccess,\n    registerFailure,\n    registerSuccess,\n    logoutSuccess\n} from './action';\nimport Cookie from 'js-cookie';\nimport UserRepository from '~/repositories/UserRepository'\n\nconst modal = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description,\n    });\n};\n\n\nfunction* loginSaga(action) {\n\n    const {\n        email,\n        password,\n        route\n    } = action.payload\n    try {\n        console.log(email)\n        console.log(password)\n        const res = yield call(UserRepository.login, {\n            email,\n            password\n        });\n        const response = res.data.data\n        if (res.data.status == 200) {\n            Cookie.set('jwt', response.token)\n            Cookie.set('userId', response.userId)\n            yield put(loginSuccess(response));\n            modal('success', \"Login Successfully!!!\", \"Welcome Back!!!\")\n            route.push('/')\n        } else {\n            yield put(loginFailure('Wrong username/password.'));\n            modal('warning', \"Login Fail\", \"Wrong username/password.\")\n        }\n    } catch (err) {\n        yield put(loginFailure('Something went wrong.'));\n        modal('warning', \"Login Fail\", \"Wrong username/password.\")\n    }\n}\n\n\nfunction* registerSaga() {\n    yield put(loggingIn(true));\n    const email = yield select(selectEmail());\n    const password = yield select(selectPassword());\n\n    try {\n        const res = yield fetch('http://localhost:1337/api/v1/users/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email,\n                password,\n            }),\n        });\n\n        if (res.ok) {\n            yield put(registerSuccess());\n        } else {\n            yield put(registerFailure());\n            modal('warning', \"Register Fail\", \"Email is already used!!!\")\n        }\n    } catch (err) {\n        yield put(registerFailure('Something went wrong.'));\n    }\n}\n\n\nfunction* logoutSaga(action) {\n    Cookie.remove('jwt');\n    Cookie.remove('userId');\n    \n    yield put(logoutSuccess({}))\n}\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.LOGIN, loginSaga)]);\n    yield all([takeEvery(actionTypes.LOGOUT, logoutSaga)]);\n    yield all([takeEvery(actionTypes.REGISTER, registerSaga)]);\n}"]},"metadata":{},"sourceType":"module"}