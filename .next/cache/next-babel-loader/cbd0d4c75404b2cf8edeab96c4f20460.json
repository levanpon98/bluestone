{"ast":null,"code":"import _regeneratorRuntime from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(createOrderSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(editOrderSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, takeLatest, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport { notification } from 'antd';\nimport OrderRepository from '~/repositories/OrderRepository';\nimport { actionTypes } from './action';\n\nvar showModal = function showModal(type, message, desc) {\n  notification[type]({\n    message: message,\n    description: desc,\n    duration: 1\n  });\n};\n\nfunction createOrderSaga(payload) {\n  var data, userData;\n  return _regeneratorRuntime.wrap(function createOrderSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          data = payload.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(OrderRepository.createOrder, data);\n\n        case 4:\n          userData = _context.sent;\n          _context.next = 9;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 7]]);\n}\n\nfunction editOrderSaga(payload) {\n  var data, userData;\n  return _regeneratorRuntime.wrap(function editOrderSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          data = payload.payload;\n          console.log(data);\n          _context2.prev = 2;\n          _context2.next = 5;\n          return call(OrderRepository.editOrder, data);\n\n        case 5:\n          userData = _context2.sent;\n          _context2.next = 10;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](2);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actionTypes.CREATE_ORDER, createOrderSaga), takeEvery(actionTypes.EDIT_ORDER, editOrderSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/order/saga.js"],"names":["createOrderSaga","editOrderSaga","rootSaga","all","put","takeLatest","takeEvery","call","polyfill","notification","OrderRepository","actionTypes","showModal","type","message","desc","description","duration","payload","data","createOrder","userData","console","log","editOrder","CREATE_ORDER","EDIT_ORDER"],"mappings":";;oDAiBUA,e;qDASAC,a;qDAUeC,Q;;AApCzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,SAA/B,EAA0CC,IAA1C,QAAsD,oBAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SACIC,WADJ,QAEO,UAFP;;AAKA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAyB;AACvCN,EAAAA,YAAY,CAACI,IAAD,CAAZ,CAAmB;AACfC,IAAAA,OAAO,EAAEA,OADM;AAEfE,IAAAA,WAAW,EAAED,IAFE;AAGfE,IAAAA,QAAQ,EAAE;AAHK,GAAnB;AAKH,CAND;;AAQA,SAAUjB,eAAV,CAA0BkB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,IADV,GACiBD,OAAO,CAACA,OADzB;AAAA;AAAA;AAGyB,iBAAMX,IAAI,CAACG,eAAe,CAACU,WAAjB,EAA8BD,IAA9B,CAAV;;AAHzB;AAGcE,UAAAA,QAHd;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUpB,aAAV,CAAwBiB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,IADV,GACiBD,OAAO,CAACA,OADzB;AAEII,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAFJ;AAAA;AAIyB,iBAAMZ,IAAI,CAACG,eAAe,CAACc,SAAjB,EAA4BL,IAA5B,CAAV;;AAJzB;AAIcE,UAAAA,QAJd;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUnB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNG,SAAS,CAACK,WAAW,CAACc,YAAb,EAA2BzB,eAA3B,CADH,EAENM,SAAS,CAACK,WAAW,CAACe,UAAb,EAAyBzB,aAAzB,CAFH,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, takeLatest, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport { notification } from 'antd';\nimport OrderRepository from '~/repositories/OrderRepository'\nimport {\n    actionTypes\n} from './action';\n\n\nconst showModal = (type, message, desc) => {\n    notification[type]({\n        message: message,\n        description: desc,\n        duration: 1,\n    });\n};\n\nfunction* createOrderSaga(payload) {\n    const data = payload.payload\n    try {\n        const userData = yield call(OrderRepository.createOrder, data)\n    } catch (err) {\n        // yield put(getPostsError(err));\n    }\n}\n\nfunction* editOrderSaga(payload) {\n    const data = payload.payload\n    console.log(data)\n    try {\n        const userData = yield call(OrderRepository.editOrder, data)\n    } catch (err) {\n        // yield put(getPostsError(err));\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        takeEvery(actionTypes.CREATE_ORDER, createOrderSaga),\n        takeEvery(actionTypes.EDIT_ORDER, editOrderSaga),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}