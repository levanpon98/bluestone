{"ast":null,"code":"import _regeneratorRuntime from \"/home/ponlv/work/projects/hmsp/bluestone/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getUserSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(updateUser),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport UserRepository from '~/repositories/UserRepository';\nimport Cookie from 'js-cookie';\nimport { notification } from 'antd';\nimport { actionTypes, getUserFailure, getUserSuccess } from './action';\n\nvar showModal = function showModal(type, message, desc) {\n  notification[type]({\n    message: message,\n    description: desc,\n    duration: 1\n  });\n};\n\nfunction getUserSaga(_ref) {\n  var userId, token, userData;\n  return _regeneratorRuntime.wrap(function getUserSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          userId = _ref.userId, token = _ref.token;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(UserRepository.getUser, {\n            userId: userId,\n            token: token\n          });\n\n        case 4:\n          userData = _context.sent;\n          console.log(userData);\n          _context.next = 8;\n          return put(getUserSuccess(userData.data.data));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put(getUserFailure({}));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n\nfunction updateUser(_ref2) {\n  var payload, userData;\n  return _regeneratorRuntime.wrap(function updateUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(UserRepository.updateUser, {\n            payload: payload\n          });\n\n        case 4:\n          userData = _context2.sent;\n\n          if (userData.data.status == 200) {\n            showModal('success', 'Success!!', \"Update User Profile Success!!\");\n          } else {\n            showModal('error', 'Error!!', \"Update User Profile Fail!!\");\n          }\n\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](1);\n          showModal('error', 'Error!!', \"Update User Profile Fail!!\");\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 8]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(actionTypes.GET_USER, getUserSaga), takeLatest(actionTypes.UPDATE_USER, updateUser)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/ponlv/work/projects/hmsp/bluestone/store/user/saga.js"],"names":["getUserSaga","updateUser","rootSaga","all","call","delay","put","take","takeLatest","UserRepository","Cookie","notification","actionTypes","getUserFailure","getUserSuccess","showModal","type","message","desc","description","duration","userId","token","getUser","userData","console","log","data","payload","status","GET_USER","UPDATE_USER"],"mappings":";;oDAmBUA,W;qDAYAC,U;qDAaeC,Q;;AA5CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,YAAT,QAA6B,MAA7B;AAEA,SACIC,WADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,UAJP;;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAyB;AACvCP,EAAAA,YAAY,CAACK,IAAD,CAAZ,CAAmB;AACfC,IAAAA,OAAO,EAAEA,OADM;AAEfE,IAAAA,WAAW,EAAED,IAFE;AAGfE,IAAAA,QAAQ,EAAE;AAHK,GAAnB;AAKH,CAND;;AAQA,SAAUpB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuBqB,UAAAA,MAAvB,QAAuBA,MAAvB,EAA+BC,KAA/B,QAA+BA,KAA/B;AAAA;AAAA;AAIyB,iBAAMlB,IAAI,CAACK,cAAc,CAACc,OAAhB,EAAyB;AAACF,YAAAA,MAAM,EAANA,MAAD;AAASC,YAAAA,KAAK,EAALA;AAAT,WAAzB,CAAV;;AAJzB;AAIcE,UAAAA,QAJd;AAKQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AALR;AAMQ,iBAAMlB,GAAG,CAACQ,cAAc,CAACU,QAAQ,CAACG,IAAT,CAAcA,IAAf,CAAf,CAAT;;AANR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMrB,GAAG,CAACO,cAAc,CAAC,EAAD,CAAf,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB2B,UAAAA,OAAtB,SAAsBA,OAAtB;AAAA;AAAA;AAEyB,iBAAMxB,IAAI,CAACK,cAAc,CAACR,UAAhB,EAA4B;AAAC2B,YAAAA,OAAO,EAAPA;AAAD,WAA5B,CAAV;;AAFzB;AAEcJ,UAAAA,QAFd;;AAGQ,cAAIA,QAAQ,CAACG,IAAT,CAAcE,MAAd,IAAwB,GAA5B,EAAiC;AAC7Bd,YAAAA,SAAS,CAAC,SAAD,EAAY,WAAZ,EAAyB,+BAAzB,CAAT;AACH,WAFD,MAEO;AACHA,YAAAA,SAAS,CAAC,OAAD,EAAU,SAAV,EAAqB,4BAArB,CAAT;AACH;;AAPT;AAAA;;AAAA;AAAA;AAAA;AASQA,UAAAA,SAAS,CAAC,OAAD,EAAU,SAAV,EAAqB,4BAArB,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,eAAe,SAAUb,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNK,UAAU,CAACI,WAAW,CAACkB,QAAb,EAAuB9B,WAAvB,CADJ,EAENQ,UAAU,CAACI,WAAW,CAACmB,WAAb,EAA0B9B,UAA1B,CAFJ,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\nimport UserRepository from '~/repositories/UserRepository'\nimport Cookie from 'js-cookie';\nimport { notification } from 'antd';\n\nimport {\n    actionTypes,\n    getUserFailure,\n    getUserSuccess\n} from './action'\n\nconst showModal = (type, message, desc) => {\n    notification[type]({\n        message: message,\n        description: desc,\n        duration: 1,\n    });\n};\n\nfunction* getUserSaga({userId, token}) {\n   \n    try {\n        \n        const userData = yield call(UserRepository.getUser, {userId, token})\n        console.log(userData)\n        yield put(getUserSuccess(userData.data.data));\n    } catch (err) {\n        yield put(getUserFailure({}));\n    }\n}\n\nfunction* updateUser({payload}) {\n    try {\n        const userData = yield call(UserRepository.updateUser, {payload})\n        if (userData.data.status == 200) {\n            showModal('success', 'Success!!', \"Update User Profile Success!!\")\n        } else {\n            showModal('error', 'Error!!', \"Update User Profile Fail!!\")\n        }\n    } catch (err) {\n        showModal('error', 'Error!!', \"Update User Profile Fail!!\")\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        takeLatest(actionTypes.GET_USER, getUserSaga),\n        takeLatest(actionTypes.UPDATE_USER, updateUser),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}